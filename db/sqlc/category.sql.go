// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: category.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (
category_name,
category_desc
) VALUES (
  $1, $2
) RETURNING category_id, category_name, category_desc
`

type CreateCategoryParams struct {
	CategoryName string `json:"category_name"`
	CategoryDesc string `json:"category_desc"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.CategoryName, arg.CategoryDesc)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName, &i.CategoryDesc)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM category
WHERE category_id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, categoryID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, categoryID)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT category_id, category_name, category_desc FROM category
WHERE category_id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, categoryID int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, categoryID)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName, &i.CategoryDesc)
	return i, err
}

const getCategoryForUpdate = `-- name: GetCategoryForUpdate :one
SELECT category_id, category_name, category_desc FROM category
WHERE category_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetCategoryForUpdate(ctx context.Context, categoryID int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryForUpdate, categoryID)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName, &i.CategoryDesc)
	return i, err
}

const listCategory = `-- name: ListCategory :many
SELECT category_id, category_name, category_desc FROM category
WHERE category_name = $1
ORDER BY category_id
LIMIT $2
OFFSET $3
`

type ListCategoryParams struct {
	CategoryName string `json:"category_name"`
	Limit        int32  `json:"limit"`
	Offset       int32  `json:"offset"`
}

func (q *Queries) ListCategory(ctx context.Context, arg ListCategoryParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategory, arg.CategoryName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.CategoryID, &i.CategoryName, &i.CategoryDesc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category
SET category_name = $1
WHERE category_id = $1
RETURNING category_id, category_name, category_desc
`

func (q *Queries) UpdateCategory(ctx context.Context, categoryName string) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory, categoryName)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName, &i.CategoryDesc)
	return i, err
}
