// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: userDetails.sql

package db

import (
	"context"
)

const createUserDetails = `-- name: CreateUserDetails :one
INSERT INTO "userDetails"(
    user_id,
    phone,
    address_line1,
    address_line2
) VALUES (
    $1, $2, $3, $4
)
RETURNING user_details_id, user_id, phone, address_line1, address_line2
`

type CreateUserDetailsParams struct {
	UserID       int64 `json:"user_id"`
	Phone        int32         `json:"phone"`
	AddressLine1 string        `json:"address_line1"`
	AddressLine2 string        `json:"address_line2"`
}

func (q *Queries) CreateUserDetails(ctx context.Context, arg CreateUserDetailsParams) (UserDetail, error) {
	row := q.db.QueryRowContext(ctx, createUserDetails,
		arg.UserID,
		arg.Phone,
		arg.AddressLine1,
		arg.AddressLine2,
	)
	var i UserDetail
	err := row.Scan(
		&i.UserDetailsID,
		&i.UserID,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
	)
	return i, err
}

const deleteUserDetails = `-- name: DeleteUserDetails :exec
DELETE FROM "userDetails"
WHERE user_details_id = $1
`

func (q *Queries) DeleteUserDetails(ctx context.Context, userDetailsID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserDetails, userDetailsID)
	return err
}

const getUserDetails = `-- name: GetUserDetails :one
SELECT user_details_id, user_id, phone, address_line1, address_line2 FROM "userDetails"
WHERE user_details_id = $1 LIMIT 1
`

func (q *Queries) GetUserDetails(ctx context.Context, userDetailsID int64) (UserDetail, error) {
	row := q.db.QueryRowContext(ctx, getUserDetails, userDetailsID)
	var i UserDetail
	err := row.Scan(
		&i.UserDetailsID,
		&i.UserID,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
	)
	return i, err
}

const listUserDetails = `-- name: ListUserDetails :many
SELECT user_details_id, user_id, phone, address_line1, address_line2 FROM "userDetails"
WHERE user_details_id = $1
ORDER BY user_details_id
LIMIT $2
OFFSET $3
`

type ListUserDetailsParams struct {
	UserDetailsID int64 `json:"user_details_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) ListUserDetails(ctx context.Context, arg ListUserDetailsParams) ([]UserDetail, error) {
	rows, err := q.db.QueryContext(ctx, listUserDetails, arg.UserDetailsID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserDetail{}
	for rows.Next() {
		var i UserDetail
		if err := rows.Scan(
			&i.UserDetailsID,
			&i.UserID,
			&i.Phone,
			&i.AddressLine1,
			&i.AddressLine2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserDetails = `-- name: UpdateUserDetails :one
UPDATE "userDetails"
SET address_line1 = $1
WHERE user_details_id = $1
RETURNING user_details_id, user_id, phone, address_line1, address_line2
`

func (q *Queries) UpdateUserDetails(ctx context.Context, addressLine1 string) (UserDetail, error) {
	row := q.db.QueryRowContext(ctx, updateUserDetails, addressLine1)
	var i UserDetail
	err := row.Scan(
		&i.UserDetailsID,
		&i.UserID,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
	)
	return i, err
}
