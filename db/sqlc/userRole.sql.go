// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: userRole.sql

package db

import (
	"context"
)

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO "userRole" (
    role
) VALUES (
    $1
)
RETURNING role_id, role
`

func (q *Queries) CreateUserRole(ctx context.Context, role string) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, createUserRole, role)
	var i UserRole
	err := row.Scan(&i.RoleID, &i.Role)
	return i, err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE FROM "userRole"
WHERE role_id = $1
`

func (q *Queries) DeleteUserRole(ctx context.Context, roleID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserRole, roleID)
	return err
}

const getUserRole = `-- name: GetUserRole :one
SELECT role_id, role FROM "userRole"
WHERE role_id = $1 LIMIT 1
`

func (q *Queries) GetUserRole(ctx context.Context, roleID int64) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, getUserRole, roleID)
	var i UserRole
	err := row.Scan(&i.RoleID, &i.Role)
	return i, err
}

const listUserRole = `-- name: ListUserRole :many
SELECT role_id, role FROM "userRole"
WHERE role = $1
ORDER BY role_id
LIMIT $2
OFFSET $3
`

type ListUserRoleParams struct {
	Role   string `json:"role"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListUserRole(ctx context.Context, arg ListUserRoleParams) ([]UserRole, error) {
	rows, err := q.db.QueryContext(ctx, listUserRole, arg.Role, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserRole{}
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(&i.RoleID, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE "userRole"
SET role = $1
WHERE role_id = $1
RETURNING role_id, role
`

func (q *Queries) UpdateUserRole(ctx context.Context, role string) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, updateUserRole, role)
	var i UserRole
	err := row.Scan(&i.RoleID, &i.Role)
	return i, err
}
