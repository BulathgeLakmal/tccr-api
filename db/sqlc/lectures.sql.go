// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: lectures.sql

package db

import (
	"context"
	"database/sql"
)

const createLecture = `-- name: CreateLecture :one
INSERT INTO "lectures"(
    course_module_id,
    lecture_desc,
    lecture_number,
    "video_URL",
    status
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING lecture_id, course_module_id, lecture_desc, lecture_number, "video_URL", status
`

type CreateLectureParams struct {
	CourseModuleID int64 `json:"course_module_id"`
	LectureDesc    string        `json:"lecture_desc"`
	LectureNumber  int32 `json:"lecture_number"`
	VideoURL       string        `json:"video_URL"`
	Status         string        `json:"status"`
}

func (q *Queries) CreateLecture(ctx context.Context, arg CreateLectureParams) (Lecture, error) {
	row := q.db.QueryRowContext(ctx, createLecture,
		arg.CourseModuleID,
		arg.LectureDesc,
		arg.LectureNumber,
		arg.VideoURL,
		arg.Status,
	)
	var i Lecture
	err := row.Scan(
		&i.LectureID,
		&i.CourseModuleID,
		&i.LectureDesc,
		&i.LectureNumber,
		&i.VideoURL,
		&i.Status,
	)
	return i, err
}

const deleteLecture = `-- name: DeleteLecture :exec
DELETE FROM "lectures"
WHERE lecture_id = $1
`

func (q *Queries) DeleteLecture(ctx context.Context, lectureID int64) error {
	_, err := q.db.ExecContext(ctx, deleteLecture, lectureID)
	return err
}

const getLecture = `-- name: GetLecture :one
SELECT lecture_id, course_module_id, lecture_desc, lecture_number, "video_URL", status FROM "lectures"
WHERE lecture_id = $1 LIMIT 1
`

func (q *Queries) GetLecture(ctx context.Context, lectureID int64) (Lecture, error) {
	row := q.db.QueryRowContext(ctx, getLecture, lectureID)
	var i Lecture
	err := row.Scan(
		&i.LectureID,
		&i.CourseModuleID,
		&i.LectureDesc,
		&i.LectureNumber,
		&i.VideoURL,
		&i.Status,
	)
	return i, err
}

const listLectures = `-- name: ListLectures :many
SELECT lecture_id, course_module_id, lecture_desc, lecture_number, "video_URL", status FROM "lectures"
WHERE lecture_number = $1
ORDER BY lecture_id
LIMIT $2
OFFSET $3
`

type ListLecturesParams struct {
	LectureNumber sql.NullInt32 `json:"lecture_number"`
	Limit         int32         `json:"limit"`
	Offset        int32         `json:"offset"`
}

func (q *Queries) ListLectures(ctx context.Context, arg ListLecturesParams) ([]Lecture, error) {
	rows, err := q.db.QueryContext(ctx, listLectures, arg.LectureNumber, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lecture{}
	for rows.Next() {
		var i Lecture
		if err := rows.Scan(
			&i.LectureID,
			&i.CourseModuleID,
			&i.LectureDesc,
			&i.LectureNumber,
			&i.VideoURL,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLecture = `-- name: UpdateLecture :one
UPDATE "lectures"
SET status = $1
WHERE lecture_id = $1
RETURNING lecture_id, course_module_id, lecture_desc, lecture_number, "video_URL", status
`

func (q *Queries) UpdateLecture(ctx context.Context, status string) (Lecture, error) {
	row := q.db.QueryRowContext(ctx, updateLecture, status)
	var i Lecture
	err := row.Scan(
		&i.LectureID,
		&i.CourseModuleID,
		&i.LectureDesc,
		&i.LectureNumber,
		&i.VideoURL,
		&i.Status,
	)
	return i, err
}
