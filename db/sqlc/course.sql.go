// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: course.sql

package db

import (
	"context"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO course (
    course_name,
    course_desc,
    category
) VALUES(
    $1 , $2, $3
)
RETURNING course_id, course_name, course_desc, category
`

type CreateCourseParams struct {
	CourseName string `json:"course_name"`
	CourseDesc string `json:"course_desc"`
	Category   string `json:"category"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, createCourse, arg.CourseName, arg.CourseDesc, arg.Category)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.CourseName,
		&i.CourseDesc,
		&i.Category,
	)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM course
WHERE course_id = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, courseID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCourse, courseID)
	return err
}

const getAllCourse = `-- name: GetAllCourse :many
SELECT course_id, course_name, course_desc, category FROM course
`

func (q *Queries) GetAllCourse(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getAllCourse)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.CourseID,
			&i.CourseName,
			&i.CourseDesc,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourse = `-- name: GetCourse :one
SELECT course_id, course_name, course_desc, category FROM course
WHERE course_id = $1 LIMIT 1
`

func (q *Queries) GetCourse(ctx context.Context, courseID int64) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourse, courseID)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.CourseName,
		&i.CourseDesc,
		&i.Category,
	)
	return i, err
}

const getCourseForUpdate = `-- name: GetCourseForUpdate :one
SELECT course_id, course_name, course_desc, category FROM course
WHERE course_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetCourseForUpdate(ctx context.Context, courseID int64) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourseForUpdate, courseID)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.CourseName,
		&i.CourseDesc,
		&i.Category,
	)
	return i, err
}

const listCourse = `-- name: ListCourse :many
SELECT course_id, course_name, course_desc, category FROM course
WHERE course_name = $1
ORDER BY course_id
LIMIT $2
OFFSET $3
`

type ListCourseParams struct {
	CourseName string `json:"course_name"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

func (q *Queries) ListCourse(ctx context.Context, arg ListCourseParams) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCourse, arg.CourseName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.CourseID,
			&i.CourseName,
			&i.CourseDesc,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :one
UPDATE course
SET course_name = $1
WHERE course_id = $1
RETURNING course_id, course_name, course_desc, category
`

func (q *Queries) UpdateCourse(ctx context.Context, courseName string) (Course, error) {
	row := q.db.QueryRowContext(ctx, updateCourse, courseName)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.CourseName,
		&i.CourseDesc,
		&i.Category,
	)
	return i, err
}
