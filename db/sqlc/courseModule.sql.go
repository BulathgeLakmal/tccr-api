// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: courseModule.sql

package db

import (
	"context"
)

const createCourseModule = `-- name: CreateCourseModule :one
INSERT INTO "courseModule"(
  course_id,
  module_name
) VALUES (
    $1, $2
)
RETURNING module_id, course_id, module_name
`

type CreateCourseModuleParams struct {
	CourseID   int64 `json:"course_id"`
	ModuleName string        `json:"module_name"`
}

func (q *Queries) CreateCourseModule(ctx context.Context, arg CreateCourseModuleParams) (CourseModule, error) {
	row := q.db.QueryRowContext(ctx, createCourseModule, arg.CourseID, arg.ModuleName)
	var i CourseModule
	err := row.Scan(&i.ModuleID, &i.CourseID, &i.ModuleName)
	return i, err
}

const deleteCourseModule = `-- name: DeleteCourseModule :exec
DELETE FROM "courseModule"
WHERE module_id = $1
`

func (q *Queries) DeleteCourseModule(ctx context.Context, moduleID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCourseModule, moduleID)
	return err
}

const getCourseModule = `-- name: GetCourseModule :one
SELECT module_id, course_id, module_name FROM "courseModule"
WHERE module_id = $1 LIMIT 1
`

func (q *Queries) GetCourseModule(ctx context.Context, moduleID int64) (CourseModule, error) {
	row := q.db.QueryRowContext(ctx, getCourseModule, moduleID)
	var i CourseModule
	err := row.Scan(&i.ModuleID, &i.CourseID, &i.ModuleName)
	return i, err
}

const listModules = `-- name: ListModules :many
SELECT module_id, course_id, module_name FROM "courseModule"
WHERE module_id = $1
ORDER BY course_id
LIMIT $2
OFFSET $3
`

type ListModulesParams struct {
	ModuleID int64 `json:"module_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListModules(ctx context.Context, arg ListModulesParams) ([]CourseModule, error) {
	rows, err := q.db.QueryContext(ctx, listModules, arg.ModuleID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CourseModule{}
	for rows.Next() {
		var i CourseModule
		if err := rows.Scan(&i.ModuleID, &i.CourseID, &i.ModuleName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourseModule = `-- name: UpdateCourseModule :one
UPDATE "courseModule"
SET module_name = $1
WHERE module_id = $1
RETURNING module_id, course_id, module_name
`

func (q *Queries) UpdateCourseModule(ctx context.Context, moduleName string) (CourseModule, error) {
	row := q.db.QueryRowContext(ctx, updateCourseModule, moduleName)
	var i CourseModule
	err := row.Scan(&i.ModuleID, &i.CourseID, &i.ModuleName)
	return i, err
}
